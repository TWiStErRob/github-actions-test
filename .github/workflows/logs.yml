# https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts fails to deliver
# TODO Report success: https://github.community/t/how-to-access-github-actions-log-of-current-run-from-a-later-step-job/183846/5

name: Logs
on:
  push:
jobs:
  build:
    name: ðŸ”¨ Build
    runs-on: ubuntu-latest
    timeout-minutes: 2
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idoutputs
    outputs:
      # https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
      run_id: ${{ steps.get-job-id.outputs.result }}
    steps:
      - name: Checkout ${{ github.ref }} branch in ${{ github.repository }} repository.
        uses: actions/checkout@v3

      - name: Build & Verify project.
        run: >
          echo "dummy test output"

      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'
        
      # Workaround from https://github.community/t/get-action-job-id/17365/10?u=twisterrob
      - name: "Get 'me'"
        id: get-job-id
        uses: actions/github-script@v6
        with:
          script: |
            // Available variables: https://github.com/actions/github-script#actionsgithub-script
            // Rest API Docs: https://docs.github.com/en/rest/actions/workflow-jobs#list-jobs-for-a-workflow-run
            // Rest JS API: https://octokit.github.io/rest.js/v18#actions-list-jobs-for-workflow-run
            //console.log(context);
            const result = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            //console.log(result);
            //console.log(result.jobs);
            // Filter for "self".
            // Note: have to use hardcoded value for name, because:
            //  * the key in yaml ('build:') is not available in this data
            //  * the name of current job is not available in github/jobs context            
            return result.data.jobs.filter(it => it.status === 'in_progress' && it.name === 'ðŸ”¨ Build')[0].id;

  validate-logs:
    name: âš  Validate logs
    runs-on: ubuntu-latest
    timeout-minutes: 1
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds
    needs: [ build ]
    # https://docs.github.com/en/actions/learn-github-actions/expressions#status-check-functions
    if: success() || failure()
    steps:
    
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'

      - name: "Download logs for build#${{ needs.build.outputs.run_id }}"
        id: download-log
        uses: actions/github-script@v6
        with:
          debug: true
          script: |
            // Note: "Download workflow run logs (/actions/runs/{run_id}/logs) is not working, because the workflow run didn't complete yet.
            // Have to use job run instead.
            // Available variables: https://github.com/actions/github-script#actionsgithub-script
            // Rest API Docs: https://docs.github.com/en/rest/actions/workflow-jobs#download-job-logs-for-a-workflow-run
            // Rest JS API: https://octokit.github.io/rest.js/v18#actions-download-job-logs-for-workflow-run
            // Using Rest API example: https://github.com/actions/github-script#using-a-separate-github-token
            const result = await github.rest.actions.downloadJobLogsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              job_id: ${{ needs.build.outputs.run_id }},
            });
            //console.log(result)
            return result.data;

      - name: "dump log"
        run: >
          cat << 'EOF-FOR-GET-JOB-ID' > dump.log
          ${{ steps.get-job-id.outputs.result }}
          EOF-FOR-GET-JOB-ID
          

      - name: "ll"
        run: ls -la

      - name: "Verify logs"
        run: |
          LOG_FILES="*.log"
          ls -la $LOG_FILES
          VALIDATION_FILE=failures.txt
          echo -n > "$VALIDATION_FILE" # Empty the file.
          validate() {
            count=$(grep --perl-regexp --count -z $1 $LOG_FILES || true);
            if [ $count -gt 0 ]; then
              echo "Validation for '$2' failed: found /$1/ $count times." >> "$VALIDATION_FILE";
              grep --perl-regexp --only-matching -z $1 $LOG_FILES >> "$VALIDATION_FILE";
              echo "" >> "$VALIDATION_FILE";
            else
              echo "Validation for '$2' passed: couldn't find /$1/.";
            fi
          }

          validate '(?m)^d[u]m+.*$' "This will be found"
          validate dummy "This will be found"
          validate dummy1 "This will not be found"
          validate 'dummy' "This will be found again"
          validate 'dummy1' "This will not be found"

          if [ -s "$VALIDATION_FILE" ]; then
            echo "Some validations failed.";
            cat "$VALIDATION_FILE";
            exit 1;
          else
            echo "All validations passed.";
            exit 0;
          fi
